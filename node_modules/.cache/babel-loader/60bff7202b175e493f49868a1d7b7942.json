{"ast":null,"code":"import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nexport const StackActions = {\n  replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n\n  push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n\n  pop(count = 1) {\n    return {\n      type: 'POP',\n      payload: {\n        count\n      }\n    };\n  },\n\n  popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n\n};\nexport default function StackRouter(options) {\n  const router = { ...BaseRouter,\n    type: 'stack',\n\n    getInitialState({\n      routeNames,\n      routeParamList\n    }) {\n      const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: 0,\n        routeNames,\n        routes: [{\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList\n    }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes.filter(route => routeNames.includes(route.name)).map(route => ({ ...route,\n        key: route.key || \"\".concat(route.name, \"-\").concat(nanoid()),\n        params: routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n          ...route.params\n        } : route.params\n      }));\n\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: routes.length - 1,\n        routeNames,\n        routes\n      };\n    },\n\n    getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList\n    }) {\n      const routes = state.routes.filter(route => routeNames.includes(route.name));\n\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return { ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1)\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return { ...state,\n        index,\n        routes: state.routes.slice(0, index + 1)\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const {\n        routeParamList\n      } = options;\n\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n            if (index === -1) {\n              return null;\n            }\n\n            const {\n              name,\n              key,\n              params\n            } = action.payload;\n\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n\n            return { ...state,\n              routes: state.routes.map((route, i) => i === index ? {\n                key: key !== undefined ? key : \"\".concat(name, \"-\").concat(nanoid()),\n                name,\n                params: routeParamList[name] !== undefined ? { ...routeParamList[name],\n                  ...params\n                } : params\n              } : route)\n            };\n          }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const route = action.payload.name && action.payload.key ? state.routes.find(route => route.name === action.payload.name && route.key === action.payload.key) : undefined;\n            let routes;\n\n            if (route) {\n              routes = state.routes.filter(r => r.key !== route.key);\n              routes.push(action.payload.params ? { ...route,\n                params: action.payload.params !== undefined ? { ...route.params,\n                  ...action.payload.params\n                } : route.params\n              } : route);\n            } else {\n              routes = [...state.routes, {\n                key: action.payload.key === undefined ? \"\".concat(action.payload.name, \"-\").concat(nanoid()) : action.payload.key,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? { ...routeParamList[action.payload.name],\n                  ...action.payload.params\n                } : action.payload.params\n              }];\n            }\n\n            return { ...state,\n              index: routes.length - 1,\n              routes\n            };\n          }\n\n          return null;\n\n        case 'POP':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n            if (index > 0) {\n              const count = Math.max(index - action.payload.count + 1, 1);\n              const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n              return { ...state,\n                index: routes.length - 1,\n                routes\n              };\n            }\n\n            return null;\n          }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n\n        case 'NAVIGATE':\n          if (action.payload.key || action.payload.name && state.routeNames.includes(action.payload.name)) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (index === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              return router.getStateForAction(state, {\n                type: 'PUSH',\n                payload: {\n                  key: action.payload.key,\n                  name: action.payload.name,\n                  params: action.payload.params\n                }\n              }, options);\n            }\n\n            const route = state.routes[index];\n            let params;\n\n            if (action.payload.merge === false) {\n              params = routeParamList[route.name] !== undefined ? { ...routeParamList[route.name],\n                ...action.payload.params\n              } : action.payload.params;\n            } else {\n              params = action.payload.params ? { ...route.params,\n                ...action.payload.params\n              } : route.params;\n            }\n\n            return { ...state,\n              index,\n              routes: [...state.routes.slice(0, index), params !== route.params ? { ...route,\n                params\n              } : state.routes[index]]\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions\n  };\n  return router;\n}","map":{"version":3,"sources":["StackRouter.tsx"],"names":["StackActions","replace","type","payload","params","push","pop","count","popToTop","router","getInitialState","routeParamList","initialRouteName","options","routeNames","stale","key","nanoid","index","routes","name","getRehydratedState","state","route","getStateForRouteNamesChange","Math","getStateForRouteFocus","r","getStateForAction","action","i","target","source","BaseRouter","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nimport type {\n  NavigationState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n  ParamListBase,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<\n  ParamList extends ParamListBase\n> = NavigationState<ParamList> & {\n  /**\n   * Type of the router, in this case, it's stack.\n   */\n  type: 'stack';\n};\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [RouteName] | [RouteName, ParamList[RouteName]]\n      : [RouteName, ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = state.routes.filter((route) =>\n        routeNames.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const route =\n              action.payload.name && action.payload.key\n                ? state.routes.find(\n                    (route) =>\n                      route.name === action.payload.name &&\n                      route.key === action.payload.key\n                  )\n                : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push(\n                action.payload.params\n                  ? {\n                      ...route,\n                      params:\n                        action.payload.params !== undefined\n                          ? {\n                              ...route.params,\n                              ...action.payload.params,\n                            }\n                          : route.params,\n                    }\n                  : route\n              );\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key === undefined\n                      ? `${action.payload.name}-${nanoid()}`\n                      : action.payload.key,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.key ||\n            (action.payload.name &&\n              state.routeNames.includes(action.payload.name))\n          ) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              return router.getStateForAction(\n                state,\n                {\n                  type: 'PUSH',\n                  payload: {\n                    key: action.payload.key,\n                    name: action.payload.name,\n                    params: action.payload.params,\n                  },\n                },\n                options\n              );\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge === false) {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            } else {\n              params = action.payload.params\n                ? {\n                    ...route.params,\n                    ...action.payload.params,\n                  }\n                : route.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params\n                  ? { ...route, params }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]},"metadata":{},"sourceType":"module"}