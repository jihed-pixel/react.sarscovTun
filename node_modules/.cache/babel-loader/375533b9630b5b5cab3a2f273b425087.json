{"ast":null,"code":"import { cond, sub, pow, divide, multiply, add, block, set, lessThan, proc, abs } from '../base';\nconst VELOCITY_EPS = 5;\n\nfunction decay(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n  const deltaTime = sub(clock, lastTime); // v0 = v / 1000\n  // v = v0 * powf(deceleration, dt);\n  // v = v * 1000;\n  // x0 = x;\n  // x = x0 + v0 * deceleration * (1 - powf(deceleration, dt)) / (1 - deceleration)\n\n  const kv = pow(config.deceleration, deltaTime);\n  const kx = divide(multiply(config.deceleration, sub(1, kv)), sub(1, config.deceleration));\n  const v0 = divide(state.velocity, 1000);\n  const v = multiply(v0, kv, 1000);\n  const x = add(state.position, multiply(v0, kx));\n  return block([set(state.position, x), set(state.velocity, v), set(state.time, clock), cond(lessThan(abs(v), VELOCITY_EPS), set(state.finished, 1))]);\n}\n\nconst procDecay = proc((clock, time, velocity, position, finished, deceleration) => decay(clock, {\n  time,\n  velocity,\n  position,\n  finished\n}, {\n  deceleration\n}));\nexport default ((clock, {\n  time,\n  velocity,\n  position,\n  finished\n}, {\n  deceleration\n}) => procDecay(clock, time, velocity, position, finished, deceleration));","map":{"version":3,"sources":["decay.js"],"names":["VELOCITY_EPS","lastTime","cond","state","deltaTime","sub","kv","pow","config","kx","divide","multiply","v0","v","x","add","block","set","lessThan","abs","procDecay","proc","decay","finished","deceleration"],"mappings":"AAAA,SAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,EAAA,GAAA,QAAA,SAAA;AAcA,MAAMA,YAAY,GAAlB,CAAA;;AAEA,SAAA,KAAA,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAqC;AACnC,QAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAAN,IAAA,EAAaA,KAAK,CAAlB,IAAA,EAArB,KAAqB,CAArB;AACA,QAAMC,SAAS,GAAGC,GAAG,CAAA,KAAA,EAFc,QAEd,CAArB,CAFmC,CAInC;AACA;AACA;AAEA;AACA;;AACA,QAAMC,EAAE,GAAGC,GAAG,CAACC,MAAM,CAAP,YAAA,EAAd,SAAc,CAAd;AACA,QAAMC,EAAE,GAAGC,MAAM,CACfC,QAAQ,CAACH,MAAM,CAAP,YAAA,EAAsBH,GAAG,CAAA,CAAA,EADlB,EACkB,CAAzB,CADO,EAEfA,GAAG,CAAA,CAAA,EAAIG,MAAM,CAFf,YAEK,CAFY,CAAjB;AAIA,QAAMI,EAAE,GAAGF,MAAM,CAACP,KAAK,CAAN,QAAA,EAAjB,IAAiB,CAAjB;AACA,QAAMU,CAAC,GAAGF,QAAQ,CAAA,EAAA,EAAA,EAAA,EAAlB,IAAkB,CAAlB;AACA,QAAMG,CAAC,GAAGC,GAAG,CAACZ,KAAK,CAAN,QAAA,EAAiBQ,QAAQ,CAAA,EAAA,EAAtC,EAAsC,CAAzB,CAAb;AACA,SAAOK,KAAK,CAAC,CACXC,GAAG,CAACd,KAAK,CAAN,QAAA,EADQ,CACR,CADQ,EAEXc,GAAG,CAACd,KAAK,CAAN,QAAA,EAFQ,CAER,CAFQ,EAGXc,GAAG,CAACd,KAAK,CAAN,IAAA,EAHQ,KAGR,CAHQ,EAIXD,IAAI,CAACgB,QAAQ,CAACC,GAAG,CAAJ,CAAI,CAAJ,EAAT,YAAS,CAAT,EAAiCF,GAAG,CAACd,KAAK,CAAN,QAAA,EAJ1C,CAI0C,CAApC,CAJO,CAAD,CAAZ;AAMD;;AAED,MAAMiB,SAAS,GAAGC,IAAI,CACpB,CAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAAA,YAAA,KACEC,KAAK,CAAA,KAAA,EAAQ;AAAA,EAAA,IAAA;AAAA,EAAA,QAAA;AAAA,EAAA,QAAA;AAA4BC,EAAAA;AAA5B,CAAR,EAAgD;AAAEC,EAAAA;AAAF,CAAhD,CAFa,CAAtB;AAKA,gBAAe,CAAA,KAAA,EAEb;AAAA,EAAA,IAAA;AAAA,EAAA,QAAA;AAAA,EAAA,QAAA;AAA4BD,EAAAA;AAA5B,CAFa,EAGb;AAAEC,EAAAA;AAAF,CAHa,KAIVJ,SAAS,CAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,QAAA,EAJd,YAIc,CAJd","sourcesContent":["import {\n  cond,\n  sub,\n  pow,\n  divide,\n  multiply,\n  add,\n  block,\n  set,\n  lessThan,\n  proc,\n  abs,\n} from '../base';\n\nconst VELOCITY_EPS = 5;\n\nfunction decay(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n  const deltaTime = sub(clock, lastTime);\n\n  // v0 = v / 1000\n  // v = v0 * powf(deceleration, dt);\n  // v = v * 1000;\n\n  // x0 = x;\n  // x = x0 + v0 * deceleration * (1 - powf(deceleration, dt)) / (1 - deceleration)\n  const kv = pow(config.deceleration, deltaTime);\n  const kx = divide(\n    multiply(config.deceleration, sub(1, kv)),\n    sub(1, config.deceleration)\n  );\n  const v0 = divide(state.velocity, 1000);\n  const v = multiply(v0, kv, 1000);\n  const x = add(state.position, multiply(v0, kx));\n  return block([\n    set(state.position, x),\n    set(state.velocity, v),\n    set(state.time, clock),\n    cond(lessThan(abs(v), VELOCITY_EPS), set(state.finished, 1)),\n  ]);\n}\n\nconst procDecay = proc(\n  (clock, time, velocity, position, finished, deceleration) =>\n    decay(clock, { time, velocity, position, finished }, { deceleration })\n);\n\nexport default (\n  clock,\n  { time, velocity, position, finished },\n  { deceleration }\n) => procDecay(clock, time, velocity, position, finished, deceleration);\n"]},"metadata":{},"sourceType":"module"}