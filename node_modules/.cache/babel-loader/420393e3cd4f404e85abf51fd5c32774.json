{"ast":null,"code":"import { cond, sub, divide, multiply, sqrt, add, block, set, exp, sin, cos, eq, or, neq, and, lessThan, greaterThan, proc, min, abs } from '../base';\nimport AnimatedValue from '../core/InternalAnimatedValue';\nconst MAX_STEPS_MS = 64;\n\nfunction spring(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n  const deltaTime = min(sub(clock, lastTime), MAX_STEPS_MS);\n  const c = config.damping;\n  const m = config.mass;\n  const k = config.stiffness;\n  const v0 = multiply(-1, state.velocity);\n  const x0 = sub(config.toValue, state.position);\n  const zeta = divide(c, multiply(2, sqrt(multiply(k, m)))); // damping ratio\n\n  const omega0 = sqrt(divide(k, m)); // undamped angular frequency of the oscillator (rad/ms)\n\n  const omega1 = multiply(omega0, sqrt(sub(1, multiply(zeta, zeta)))); // exponential decay\n\n  const t = divide(deltaTime, 1000); // in seconds\n\n  const sin1 = sin(multiply(omega1, t));\n  const cos1 = cos(multiply(omega1, t)); // under damped\n\n  const underDampedEnvelope = exp(multiply(-1, zeta, omega0, t));\n  const underDampedFrag1 = multiply(underDampedEnvelope, add(multiply(sin1, divide(add(v0, multiply(zeta, omega0, x0)), omega1)), multiply(x0, cos1)));\n  const underDampedPosition = sub(config.toValue, underDampedFrag1); // This looks crazy -- it's actually just the derivative of the oscillation function\n\n  const underDampedVelocity = sub(multiply(zeta, omega0, underDampedFrag1), multiply(underDampedEnvelope, sub(multiply(cos1, add(v0, multiply(zeta, omega0, x0))), multiply(omega1, x0, sin1)))); // critically damped\n\n  const criticallyDampedEnvelope = exp(multiply(-1, omega0, t));\n  const criticallyDampedPosition = sub(config.toValue, multiply(criticallyDampedEnvelope, add(x0, multiply(add(v0, multiply(omega0, x0)), t))));\n  const criticallyDampedVelocity = multiply(criticallyDampedEnvelope, add(multiply(v0, sub(multiply(t, omega0), 1)), multiply(t, x0, omega0, omega0))); // conditions for stopping the spring animations\n\n  const prevPosition = state.prevPosition ? state.prevPosition : new AnimatedValue(0);\n  const isOvershooting = cond(and(config.overshootClamping, neq(config.stiffness, 0)), cond(lessThan(prevPosition, config.toValue), greaterThan(state.position, config.toValue), lessThan(state.position, config.toValue)));\n  const isVelocity = lessThan(abs(state.velocity), config.restSpeedThreshold);\n  const isDisplacement = or(eq(config.stiffness, 0), lessThan(abs(sub(config.toValue, state.position)), config.restDisplacementThreshold));\n  return block([set(prevPosition, state.position), cond(lessThan(zeta, 1), [set(state.position, underDampedPosition), set(state.velocity, underDampedVelocity)], [set(state.position, criticallyDampedPosition), set(state.velocity, criticallyDampedVelocity)]), set(state.time, clock), cond(or(isOvershooting, and(isVelocity, isDisplacement)), [cond(neq(config.stiffness, 0), [set(state.velocity, 0), set(state.position, config.toValue)]), set(state.finished, 1)])]);\n}\n\nconst procSpring = proc((finished, velocity, position, time, prevPosition, toValue, damping, mass, stiffness, overshootClamping, restSpeedThreshold, restDisplacementThreshold, clock) => spring(clock, {\n  finished,\n  velocity,\n  position,\n  time,\n  // @ts-ignore\n  prevPosition\n}, {\n  toValue,\n  damping,\n  mass,\n  stiffness,\n  overshootClamping,\n  restDisplacementThreshold,\n  restSpeedThreshold\n}));\nexport default ((clock, {\n  finished,\n  velocity,\n  position,\n  time,\n  // @ts-ignore\n  prevPosition\n}, {\n  toValue,\n  damping,\n  mass,\n  stiffness,\n  overshootClamping,\n  restDisplacementThreshold,\n  restSpeedThreshold\n}) => procSpring(finished, velocity, position, time, prevPosition, toValue, damping, mass, stiffness, overshootClamping, restSpeedThreshold, restDisplacementThreshold, clock));","map":{"version":3,"sources":["spring.js"],"names":["MAX_STEPS_MS","lastTime","cond","state","deltaTime","min","sub","c","config","m","k","v0","multiply","x0","zeta","divide","sqrt","omega0","omega1","t","sin1","sin","cos1","cos","underDampedEnvelope","exp","underDampedFrag1","add","underDampedPosition","underDampedVelocity","criticallyDampedEnvelope","criticallyDampedPosition","criticallyDampedVelocity","prevPosition","isOvershooting","and","neq","lessThan","greaterThan","isVelocity","abs","isDisplacement","or","eq","block","set","procSpring","proc","spring","restSpeedThreshold"],"mappings":"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","sourcesContent":["import {\n  cond,\n  sub,\n  divide,\n  multiply,\n  sqrt,\n  add,\n  block,\n  set,\n  exp,\n  sin,\n  cos,\n  eq,\n  or,\n  neq,\n  and,\n  lessThan,\n  greaterThan,\n  proc,\n  min,\n  abs,\n} from '../base';\nimport AnimatedValue from '../core/InternalAnimatedValue';\n\nconst MAX_STEPS_MS = 64;\n\nfunction spring(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n\n  const deltaTime = min(sub(clock, lastTime), MAX_STEPS_MS);\n\n  const c = config.damping;\n  const m = config.mass;\n  const k = config.stiffness;\n\n  const v0 = multiply(-1, state.velocity);\n  const x0 = sub(config.toValue, state.position);\n\n  const zeta = divide(c, multiply(2, sqrt(multiply(k, m)))); // damping ratio\n  const omega0 = sqrt(divide(k, m)); // undamped angular frequency of the oscillator (rad/ms)\n  const omega1 = multiply(omega0, sqrt(sub(1, multiply(zeta, zeta)))); // exponential decay\n\n  const t = divide(deltaTime, 1000); // in seconds\n\n  const sin1 = sin(multiply(omega1, t));\n  const cos1 = cos(multiply(omega1, t));\n\n  // under damped\n  const underDampedEnvelope = exp(multiply(-1, zeta, omega0, t));\n  const underDampedFrag1 = multiply(\n    underDampedEnvelope,\n    add(\n      multiply(sin1, divide(add(v0, multiply(zeta, omega0, x0)), omega1)),\n      multiply(x0, cos1)\n    )\n  );\n  const underDampedPosition = sub(config.toValue, underDampedFrag1);\n  // This looks crazy -- it's actually just the derivative of the oscillation function\n  const underDampedVelocity = sub(\n    multiply(zeta, omega0, underDampedFrag1),\n    multiply(\n      underDampedEnvelope,\n      sub(\n        multiply(cos1, add(v0, multiply(zeta, omega0, x0))),\n        multiply(omega1, x0, sin1)\n      )\n    )\n  );\n\n  // critically damped\n  const criticallyDampedEnvelope = exp(multiply(-1, omega0, t));\n  const criticallyDampedPosition = sub(\n    config.toValue,\n    multiply(\n      criticallyDampedEnvelope,\n      add(x0, multiply(add(v0, multiply(omega0, x0)), t))\n    )\n  );\n  const criticallyDampedVelocity = multiply(\n    criticallyDampedEnvelope,\n    add(\n      multiply(v0, sub(multiply(t, omega0), 1)),\n      multiply(t, x0, omega0, omega0)\n    )\n  );\n\n  // conditions for stopping the spring animations\n  const prevPosition = state.prevPosition\n    ? state.prevPosition\n    : new AnimatedValue(0);\n\n  const isOvershooting = cond(\n    and(config.overshootClamping, neq(config.stiffness, 0)),\n    cond(\n      lessThan(prevPosition, config.toValue),\n      greaterThan(state.position, config.toValue),\n      lessThan(state.position, config.toValue)\n    )\n  );\n  const isVelocity = lessThan(abs(state.velocity), config.restSpeedThreshold);\n  const isDisplacement = or(\n    eq(config.stiffness, 0),\n    lessThan(\n      abs(sub(config.toValue, state.position)),\n      config.restDisplacementThreshold\n    )\n  );\n\n  return block([\n    set(prevPosition, state.position),\n    cond(\n      lessThan(zeta, 1),\n      [\n        set(state.position, underDampedPosition),\n        set(state.velocity, underDampedVelocity),\n      ],\n      [\n        set(state.position, criticallyDampedPosition),\n        set(state.velocity, criticallyDampedVelocity),\n      ]\n    ),\n    set(state.time, clock),\n    cond(or(isOvershooting, and(isVelocity, isDisplacement)), [\n      cond(neq(config.stiffness, 0), [\n        set(state.velocity, 0),\n        set(state.position, config.toValue),\n      ]),\n      set(state.finished, 1),\n    ]),\n  ]);\n}\n\nconst procSpring = proc(\n  (\n    finished,\n    velocity,\n    position,\n    time,\n    prevPosition,\n    toValue,\n    damping,\n    mass,\n    stiffness,\n    overshootClamping,\n    restSpeedThreshold,\n    restDisplacementThreshold,\n    clock\n  ) =>\n    spring(\n      clock,\n      {\n        finished,\n        velocity,\n        position,\n        time,\n        // @ts-ignore\n        prevPosition,\n      },\n      {\n        toValue,\n        damping,\n        mass,\n        stiffness,\n        overshootClamping,\n        restDisplacementThreshold,\n        restSpeedThreshold,\n      }\n    )\n);\n\nexport default (\n  clock,\n  {\n    finished,\n    velocity,\n    position,\n    time,\n    // @ts-ignore\n    prevPosition,\n  },\n  {\n    toValue,\n    damping,\n    mass,\n    stiffness,\n    overshootClamping,\n    restDisplacementThreshold,\n    restSpeedThreshold,\n  }\n) =>\n  procSpring(\n    finished,\n    velocity,\n    position,\n    time,\n    prevPosition,\n    toValue,\n    damping,\n    mass,\n    stiffness,\n    overshootClamping,\n    restSpeedThreshold,\n    restDisplacementThreshold,\n    clock\n  );\n"]},"metadata":{},"sourceType":"module"}