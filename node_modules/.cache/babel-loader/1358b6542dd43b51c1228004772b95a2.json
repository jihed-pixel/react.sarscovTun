{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { findNodeHandle, Platform, StyleSheet } from 'react-native';\nimport ReanimatedEventEmitter from './ReanimatedEventEmitter';\nimport AnimatedEvent from './core/AnimatedEvent';\nimport AnimatedNode from './core/AnimatedNode';\nimport AnimatedValue from './core/AnimatedValue';\nimport { createOrReusePropsNode } from './core/AnimatedProps';\nimport invariant from 'fbjs/lib/invariant';\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nfunction dummyListener() {// empty listener we use to assign to listener properties for which animated\n  // event is used.\n}\n\nexport default function createAnimatedComponent(Component) {\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');\n\n  class AnimatedComponent extends React.Component {\n    constructor(props) {\n      super(props);\n\n      _defineProperty(this, \"_invokeAnimatedPropsCallbackOnMount\", false);\n\n      _defineProperty(this, \"_animatedPropsCallback\", () => {\n        if (this._component == null) {\n          // AnimatedProps is created in will-mount because it's used in render.\n          // But this callback may be invoked before mount in async mode,\n          // In which case we should defer the setNativeProps() call.\n          // React may throw away uncommitted work in async mode,\n          // So a deferred call won't always be invoked.\n          this._invokeAnimatedPropsCallbackOnMount = true;\n        } else if (typeof this._component.setNativeProps !== 'function') {\n          this.forceUpdate();\n        } else {\n          this._component.setNativeProps(this._propsAnimated.__getValue());\n        }\n      });\n\n      _defineProperty(this, \"_setComponentRef\", c => {\n        if (c !== this._component) {\n          this._component = c;\n        }\n      });\n\n      this._attachProps(this.props);\n    }\n\n    componentWillUnmount() {\n      this._detachPropUpdater();\n\n      this._propsAnimated && this._propsAnimated.__detach();\n\n      this._detachNativeEvents();\n    }\n\n    setNativeProps(props) {\n      this._component.setNativeProps(props);\n    }\n\n    componentDidMount() {\n      if (this._invokeAnimatedPropsCallbackOnMount) {\n        this._invokeAnimatedPropsCallbackOnMount = false;\n\n        this._animatedPropsCallback();\n      }\n\n      this._propsAnimated.setNativeView(this._component);\n\n      this._attachNativeEvents();\n\n      this._attachPropUpdater();\n    }\n\n    _getEventViewRef() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      return this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;\n    }\n\n    _attachNativeEvents() {\n      const node = this._getEventViewRef();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n\n        if (prop instanceof AnimatedEvent) {\n          prop.attachEvent(node, key);\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      const node = this._getEventViewRef();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n\n        if (prop instanceof AnimatedEvent) {\n          prop.detachEvent(node, key);\n        }\n      }\n    }\n\n    _reattachNativeEvents(prevProps) {\n      const node = this._getEventViewRef();\n\n      const attached = new Set();\n      const nextEvts = new Set();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n\n        if (prop instanceof AnimatedEvent) {\n          nextEvts.add(prop.__nodeID);\n        }\n      }\n\n      for (const key in prevProps) {\n        const prop = this.props[key];\n\n        if (prop instanceof AnimatedEvent) {\n          if (!nextEvts.has(prop.__nodeID)) {\n            // event was in prev props but not in current props, we detach\n            prop.detachEvent(node, key);\n          } else {\n            // event was in prev and is still in current props\n            attached.add(prop.__nodeID);\n          }\n        }\n      }\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n\n        if (prop instanceof AnimatedEvent && !attached.has(prop.__nodeID)) {\n          // not yet attached\n          prop.attachEvent(node, key);\n        }\n      }\n    } // The system is best designed when setNativeProps is implemented. It is\n    // able to avoid re-rendering and directly set the attributes that changed.\n    // However, setNativeProps can only be implemented on native components\n    // If you want to animate a composite component, you need to re-render it.\n    // In this case, we have a fallback that uses forceUpdate.\n\n\n    _attachProps(nextProps) {\n      const oldPropsAnimated = this._propsAnimated;\n      this._propsAnimated = createOrReusePropsNode(nextProps, this._animatedPropsCallback, oldPropsAnimated); // If prop node has been reused we don't need to call into \"__detach\"\n\n      if (oldPropsAnimated !== this._propsAnimated) {\n        // When you call detach, it removes the element from the parent list\n        // of children. If it goes to 0, then the parent also detaches itself\n        // and so on.\n        // An optimization is to attach the new elements and THEN detach the old\n        // ones instead of detaching and THEN attaching.\n        // This way the intermediate state isn't to go to 0 and trigger\n        // this expensive recursive detaching to then re-attach everything on\n        // the very next operation.\n        oldPropsAnimated && oldPropsAnimated.__detach();\n      }\n    }\n\n    _updateFromNative(props) {\n      this._component.setNativeProps(props);\n    }\n\n    _attachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.set(viewTag, this);\n\n      if (NODE_MAPPING.size === 1) {\n        ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\n      }\n    }\n\n    _detachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.delete(viewTag);\n\n      if (NODE_MAPPING.size === 0) {\n        ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\n      }\n    }\n\n    componentDidUpdate(prevProps) {\n      this._attachProps(this.props);\n\n      this._reattachNativeEvents(prevProps);\n\n      this._propsAnimated.setNativeView(this._component);\n    }\n\n    _filterNonAnimatedStyle(inputStyle) {\n      const style = {};\n\n      for (const key in inputStyle) {\n        const value = inputStyle[key];\n\n        if (key !== 'transform') {\n          if (value instanceof AnimatedValue) {\n            style[key] = value._startingValue;\n          } else if (!(value instanceof AnimatedNode)) {\n            style[key] = value;\n          }\n        }\n      }\n\n      return style;\n    }\n\n    _filterNonAnimatedProps(inputProps) {\n      const props = {};\n\n      for (const key in inputProps) {\n        const value = inputProps[key];\n\n        if (key === 'style') {\n          props[key] = this._filterNonAnimatedStyle(StyleSheet.flatten(value));\n        } else if (value instanceof AnimatedEvent) {\n          // we cannot filter out event listeners completely as some components\n          // rely on having a callback registered in order to generate events\n          // alltogether. Therefore we provide a dummy callback here to allow\n          // native event dispatcher to hijack events.\n          props[key] = dummyListener;\n        } else if (value instanceof AnimatedValue) {\n          props[key] = value._startingValue;\n        } else if (!(value instanceof AnimatedNode)) {\n          props[key] = value;\n        }\n      }\n\n      return props;\n    }\n\n    render() {\n      const props = this._filterNonAnimatedProps(this.props);\n\n      const platformProps = Platform.select({\n        web: {},\n        default: {\n          collapsable: false\n        }\n      });\n      return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n        ref: this._setComponentRef\n      }, platformProps));\n    } // A third party library can use getNode()\n    // to get the node reference of the decorated component\n\n\n    getNode() {\n      return this._component;\n    }\n\n  }\n\n  AnimatedComponent.displayName = \"AnimatedComponent(\".concat(Component.displayName || Component.name || 'Component', \")\");\n  return AnimatedComponent;\n}","map":{"version":3,"sources":["createAnimatedComponent.js"],"names":["NODE_MAPPING","component","data","invariant","Component","React","constructor","componentWillUnmount","setNativeProps","componentDidMount","_getEventViewRef","_attachNativeEvents","node","prop","_detachNativeEvents","_reattachNativeEvents","attached","nextEvts","_attachProps","oldPropsAnimated","createOrReusePropsNode","_updateFromNative","_attachPropUpdater","viewTag","findNodeHandle","ReanimatedEventEmitter","_detachPropUpdater","componentDidUpdate","c","_filterNonAnimatedStyle","style","value","inputStyle","key","_filterNonAnimatedProps","props","inputProps","StyleSheet","render","platformProps","web","default","collapsable","_setComponentRef","getNode","AnimatedComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { findNodeHandle, Platform, StyleSheet } from 'react-native';\nimport ReanimatedEventEmitter from './ReanimatedEventEmitter';\n\nimport AnimatedEvent from './core/AnimatedEvent';\nimport AnimatedNode from './core/AnimatedNode';\nimport AnimatedValue from './core/AnimatedValue';\nimport { createOrReusePropsNode } from './core/AnimatedProps';\n\nimport invariant from 'fbjs/lib/invariant';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nfunction dummyListener() {\n  // empty listener we use to assign to listener properties for which animated\n  // event is used.\n}\n\nexport default function createAnimatedComponent(Component) {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    '`createAnimatedComponent` does not support stateless functional components; ' +\n      'use a class component instead.'\n  );\n\n  class AnimatedComponent extends React.Component {\n    _invokeAnimatedPropsCallbackOnMount = false;\n\n    constructor(props) {\n      super(props);\n      this._attachProps(this.props);\n    }\n\n    componentWillUnmount() {\n      this._detachPropUpdater();\n      this._propsAnimated && this._propsAnimated.__detach();\n      this._detachNativeEvents();\n    }\n\n    setNativeProps(props) {\n      this._component.setNativeProps(props);\n    }\n\n    componentDidMount() {\n      if (this._invokeAnimatedPropsCallbackOnMount) {\n        this._invokeAnimatedPropsCallbackOnMount = false;\n        this._animatedPropsCallback();\n      }\n\n      this._propsAnimated.setNativeView(this._component);\n      this._attachNativeEvents();\n      this._attachPropUpdater();\n    }\n\n    _getEventViewRef() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      return this._component.getScrollableNode\n        ? this._component.getScrollableNode()\n        : this._component;\n    }\n\n    _attachNativeEvents() {\n      const node = this._getEventViewRef();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.attachEvent(node, key);\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      const node = this._getEventViewRef();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.detachEvent(node, key);\n        }\n      }\n    }\n\n    _reattachNativeEvents(prevProps) {\n      const node = this._getEventViewRef();\n      const attached = new Set();\n      const nextEvts = new Set();\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          nextEvts.add(prop.__nodeID);\n        }\n      }\n      for (const key in prevProps) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          if (!nextEvts.has(prop.__nodeID)) {\n            // event was in prev props but not in current props, we detach\n            prop.detachEvent(node, key);\n          } else {\n            // event was in prev and is still in current props\n            attached.add(prop.__nodeID);\n          }\n        }\n      }\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent && !attached.has(prop.__nodeID)) {\n          // not yet attached\n          prop.attachEvent(node, key);\n        }\n      }\n    }\n\n    // The system is best designed when setNativeProps is implemented. It is\n    // able to avoid re-rendering and directly set the attributes that changed.\n    // However, setNativeProps can only be implemented on native components\n    // If you want to animate a composite component, you need to re-render it.\n    // In this case, we have a fallback that uses forceUpdate.\n    _animatedPropsCallback = () => {\n      if (this._component == null) {\n        // AnimatedProps is created in will-mount because it's used in render.\n        // But this callback may be invoked before mount in async mode,\n        // In which case we should defer the setNativeProps() call.\n        // React may throw away uncommitted work in async mode,\n        // So a deferred call won't always be invoked.\n        this._invokeAnimatedPropsCallbackOnMount = true;\n      } else if (typeof this._component.setNativeProps !== 'function') {\n        this.forceUpdate();\n      } else {\n        this._component.setNativeProps(this._propsAnimated.__getValue());\n      }\n    };\n\n    _attachProps(nextProps) {\n      const oldPropsAnimated = this._propsAnimated;\n\n      this._propsAnimated = createOrReusePropsNode(\n        nextProps,\n        this._animatedPropsCallback,\n        oldPropsAnimated\n      );\n      // If prop node has been reused we don't need to call into \"__detach\"\n      if (oldPropsAnimated !== this._propsAnimated) {\n        // When you call detach, it removes the element from the parent list\n        // of children. If it goes to 0, then the parent also detaches itself\n        // and so on.\n        // An optimization is to attach the new elements and THEN detach the old\n        // ones instead of detaching and THEN attaching.\n        // This way the intermediate state isn't to go to 0 and trigger\n        // this expensive recursive detaching to then re-attach everything on\n        // the very next operation.\n        oldPropsAnimated && oldPropsAnimated.__detach();\n      }\n    }\n\n    _updateFromNative(props) {\n      this._component.setNativeProps(props);\n    }\n\n    _attachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.set(viewTag, this);\n      if (NODE_MAPPING.size === 1) {\n        ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\n      }\n    }\n\n    _detachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.delete(viewTag);\n      if (NODE_MAPPING.size === 0) {\n        ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\n      }\n    }\n\n    componentDidUpdate(prevProps) {\n      this._attachProps(this.props);\n      this._reattachNativeEvents(prevProps);\n\n      this._propsAnimated.setNativeView(this._component);\n    }\n\n    _setComponentRef = c => {\n      if (c !== this._component) {\n        this._component = c;\n      }\n    };\n\n    _filterNonAnimatedStyle(inputStyle) {\n      const style = {};\n      for (const key in inputStyle) {\n        const value = inputStyle[key];\n        if (key !== 'transform') {\n          if (value instanceof AnimatedValue) {\n            style[key] = value._startingValue;\n          } else if (!(value instanceof AnimatedNode)) {\n            style[key] = value;\n          }\n        }\n      }\n      return style;\n    }\n\n    _filterNonAnimatedProps(inputProps) {\n      const props = {};\n      for (const key in inputProps) {\n        const value = inputProps[key];\n        if (key === 'style') {\n          props[key] = this._filterNonAnimatedStyle(StyleSheet.flatten(value));\n        } else if (value instanceof AnimatedEvent) {\n          // we cannot filter out event listeners completely as some components\n          // rely on having a callback registered in order to generate events\n          // alltogether. Therefore we provide a dummy callback here to allow\n          // native event dispatcher to hijack events.\n          props[key] = dummyListener;\n        } else if (value instanceof AnimatedValue) {\n          props[key] = value._startingValue;\n        } else if (!(value instanceof AnimatedNode)) {\n          props[key] = value;\n        }\n      }\n      return props;\n    }\n\n    render() {\n      const props = this._filterNonAnimatedProps(this.props);\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n      return (\n        <Component {...props} ref={this._setComponentRef} {...platformProps} />\n      );\n    }\n\n    // A third party library can use getNode()\n    // to get the node reference of the decorated component\n    getNode() {\n      return this._component;\n    }\n  }\n\n  AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName ||\n    Component.name ||\n    'Component'})`;\n\n  return AnimatedComponent;\n}\n"]},"metadata":{},"sourceType":"module"}